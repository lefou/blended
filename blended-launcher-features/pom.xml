<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2014ff,  https://github.com/woq-blended
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <prerequisites>
    <maven>3.3.1</maven>
  </prerequisites>

  <parent>
    <groupId>de.wayofquality.blended</groupId>
    <artifactId>blended.parent</artifactId>
    <version>1.2-SNAPSHOT</version>
    <relativePath>../blended-parent</relativePath>
  </parent>

  <name>${project.artifactId}</name>
  <artifactId>blended.launcher.features</artifactId>
  <packaging>jar</packaging>

  <dependencies>
    <dependency>
			<groupId>org.apache.felix</groupId>
			<artifactId>org.apache.felix.configadmin</artifactId>
			<version>${felix.ca.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>blended.util</artifactId>
			<version>${blended.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>blended.container.context</artifactId>
			<version>${blended.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>blended.jmx</artifactId>
			<version>${blended.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>blended.persistence</artifactId>
			<version>${blended.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>blended.neo4j.api</artifactId>
			<version>${blended.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>blended.container.registry</artifactId>
			<version>${blended.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>blended.camel.utils</artifactId>
			<version>${blended.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>blended.mgmt.agent</artifactId>
			<version>${blended.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>blended.mgmt.rest</artifactId>
			<version>${blended.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>blended.jolokia</artifactId>
			<version>${blended.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>blended.activemq.brokerstarter</artifactId>
			<version>${blended.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>blended.activemq.defaultbroker</artifactId>
			<version>${blended.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>blended.akka</artifactId>
			<version>${blended.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>blended.spray.api</artifactId>
			<version>${blended.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>blended.spray</artifactId>
			<version>${blended.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}.samples</groupId>
			<artifactId>blended.samples.spray.helloworld</artifactId>
			<version>${blended.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}.samples</groupId>
			<artifactId>blended.samples.camel</artifactId>
			<version>${blended.version}</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		<dependency>
			<groupId>org.ops4j.pax.logging</groupId>
			<artifactId>pax-logging-api</artifactId>
			<version>${pax-logging.version}</version>
		</dependency>

		<dependency>
			<groupId>org.ops4j.pax.logging</groupId>
			<artifactId>pax-logging-service</artifactId>
			<version>${pax-logging.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.aries.jmx</groupId>
			<artifactId>org.apache.aries.jmx.api</artifactId>
			<version>${aries.jmx.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.aries.jmx</groupId>
			<artifactId>org.apache.aries.jmx.core</artifactId>
			<version>${aries.jmx.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.aries</groupId>
			<artifactId>org.apache.aries.util</artifactId>
			<version>${aries.util.version}</version>
		</dependency>

		<dependency>
			<groupId>org.ops4j.pax.logging</groupId>
			<artifactId>pax-logging-log4j2</artifactId>
			<version>${pax-logging.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.servicemix.specs</groupId>
			<artifactId>org.apache.servicemix.specs.jaxb-api-2.2</artifactId>
			<version>2.5.0</version>
		</dependency>

		<dependency>
			<groupId>org.apache.servicemix.specs</groupId>
			<artifactId>org.apache.servicemix.specs.stax-api-1.0</artifactId>
			<version>2.4.0</version>
		</dependency>

		<dependency>
			<groupId>org.ow2.asm</groupId>
			<artifactId>asm-all</artifactId>
			<version>4.1</version>
		</dependency>

		<dependency>
			<groupId>org.apache.aries.proxy</groupId>
			<artifactId>org.apache.aries.proxy.api</artifactId>
			<version>${aries.proxy.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.aries.blueprint</groupId>
			<artifactId>org.apache.aries.blueprint.api</artifactId>
			<version>1.0.1</version>
		</dependency>

		<dependency>
			<groupId>org.apache.aries.blueprint</groupId>
			<artifactId>org.apache.aries.blueprint.core</artifactId>
			<version>1.4.3</version>
		</dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <dependencies>
          <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>blended.updater.tools</artifactId>
            <version>${blended.version}</version>
          </dependency>
        </dependencies>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>compile</phase>
            <goals><goal>script</goal></goals>
            <configuration>
              <script><![CDATA[
                import blended.updater.tools.configbuilder._
                import scala.collection.JavaConverters._
                import java.io.File
                import org.apache.maven.artifact.DefaultArtifact
                import org.apache.maven.artifact.versioning.VersionRange
                import org.apache.maven.project.artifact.AttachedArtifact
                import org.apache.maven.artifact.handler.DefaultArtifactHandler
                
                val srcFeatureDir = new File(project.getBasedir, "/target/classes")
                val destFeatureDir = new File(project.getBasedir, "target/features")
                
                println(s"Project: ${project}")
                println(s"Project repositories: ${project.getRepositories}")
                println(s"Project properties: ${project.getProperties}")
                println(s"Project building request: ${project.getProjectBuildingRequest}")
                println(s"Project local repository: ${project.getProjectBuildingRequest.getLocalRepository}")
                val localRepoUrl = project.getProjectBuildingRequest.getLocalRepository.getUrl
                val remoteRepoUrls = project.getRepositories.asScala.map(r => r.getUrl)
                
                val features = Option(srcFeatureDir.listFiles()).getOrElse(Array()).filter(f => f.getName.endsWith(".conf"))
                if(features.isEmpty) sys.error("No feature files found")
                println(s"About to process feature files: ${features.map(_.getName).mkString(", ")}")
                
                val targetFeatureFiles = features.map { featureFile =>
                  val targetFile = new File(destFeatureDir, featureFile.getName()) 
                  println(s"Processing feature: ${featureFile}")
                  val args = Array(
                    "--debug",
                    "-f", featureFile.getAbsolutePath(),
                    "-o", targetFile.getAbsolutePath(),
                    "--work-dir", new File("target/downloads").getAbsolutePath(),
                    "--discard-invalid",
                    "--download-missing",
                    "--update-checksums",
                    "--maven-dir", localRepoUrl
                  ) ++ remoteRepoUrls.toArray.flatMap(u => Array("--maven-dir", u))
                  println(s"Invoking FeatureBuilder with args: ${args.mkString(" ")}")
                  
                  FeatureBuilder.run(args)
                  targetFile
                }
                
                println(s"Produced: ${targetFeatureFiles.mkString(", ")}")

                targetFeatureFiles.foreach { featureFile =>
                  val name = featureFile.getName
                  val classifier = name.substring(0, name.length - ".conf".length)
                  println(s"Attaching as artifact: ${classifier}")
                  
                  val handler = new DefaultArtifactHandler("conf")
                  // val artifact = new DefaultArtifact(project.getGroupId, project.getArtifactId, VersionRange.createFromVersion(project.getVersion), "compile", "conf", classifier, handler)
                  val artifact = new AttachedArtifact(project.getArtifact(), "conf", classifier, handler)
                  artifact.setFile(featureFile)
                  artifact.setResolved(true)
                  project.addAttachedArtifact(artifact)
                }
              ]]></script>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>

