blended {

  flow {
    headerPrefix = "App"
  }

  jms {
    bridge {
      provider : [
        {
          vendor : "activemq"
          provider : "activemq"
          internal : true
          inbound : "bridge.data.in"
          outbound : "bridge.data.out"
          errorQueue: "global.error"
          eventQueue: "event.out"
          listener: 3
        },
        {
          vendor : "sonic75"
          provider : "central"
          internal : false
          inbound : "bridge.data.in"
          outbound : "bridge.data.out"
          errorQueue: "global.error"
          eventQueue: "$[[AppCountry]].global.evnt.out"
          listener: 3
        },
        {
          vendor : "sagum"
          provider : "cc_topic"
          internal : false
          inbound : "bridge.data.in"
          outbound : "bridge.data.out"
          errorQueue: "global.error"
          eventQueue: "event.out"
          listener: 3
        },
        {
          vendor : "sagum"
          provider : "$[[AppCountry]]_queue"
          internal : false
          inbound : "bridge.data.in"
          outbound : "bridge.data.out"
          errorQueue: "global.error"
          eventQueue: "event.out"
          listener: 3
        }
      ]
    }
  }

  streams.dispatcher {

    defaultEventVendor = "sonic75"
    defaultEventProvider = "central"

    applicationLogHeader = [
      "ProcessID", "Module", "ModuleLast"
    ]

    defaultHeader = [
      { name = "ComponentName",  expression : "Dispatcher" }
      { name = "RouteName",      expression : "${{#ResourceType}}" }
      { name = "LocationId",     expression : "$[[AppLocation(right:4)]]" }
      { name = "CountryId",      expression : "$[[AppCountry]]" }
      { name = "QualifiedId",    expression : "$[[AppCountry]]$[[AppLocation(right:4)]]" }
      { name = "ContainerId",    expression : "${{#idSvc.uuid}}" }
      { name = "Timestamp",      expression : "${{new java.util.Date().getTime()}}" }
      { name = "MessageSrcId",   expression : "${{#idSvc.containerContext.containerHostname}}" }
      { name = "ResourceSize",   expression : "${{#envelope.flowMessage.bodySize()}}"}

      { name = "TransactionId",
        expression : "$[[AppCountry]]$[[AppLocation(right:4)]]-${{new java.text.SimpleDateFormat(\"yyyyMMdd-HHmmssSSS\").format(new java.util.Date(#Timestamp))}}-${{#idSvc.containerContext.nextTransactionCounter}}"
        overwrite : false
      }

      // These properties will be deleted when the dispatcher is entered if they are already set in the message
      { name : ${blended.flow.headerPrefix}"BridgeVendor" }
      { name : ${blended.flow.headerPrefix}"BridgeProvider" }
      { name : ${blended.flow.headerPrefix}"BridgeDestination" }
    ]

    resourcetypes = {

      SagTest = {
        withCBE: false
        outbound: [
          {
            bridgeVendor: "activemq"
            bridgeProvider: "activemq"
            bridgeDestination: "topic:SagTest"
          }
        ]
      }

      NoOutbound = {
        withCBE: false
        outbound : []
      }

      # Allow the shop to register with the DataCenter
      NoCbe {
        withCBE: false
        outbound: [
          {
            bridgeVendor: "sonic75"
            bridgeProvider: "central"
            bridgeDestination: "$[[AppCountry]].sib.global.queuecreate.out"
          }
        ]
      }

      # Send messages to the scale assortment topic
      WithCbe = {
        outbound: [
          {
            bridgeVendor: "activemq"
            bridgeProvider = "activemq"
            bridgeDestination = "topic:store/device/scale"
            outboundHeader: [{
              header: {
                DestinationPath = "/opt/import"
              }
            }]
          }
        ]
      }

      Condition = {
        withCBE: false
        outbound = [
          {
            bridgeVendor: "sonic75"
            bridgeProvider = "central"
            bridgeDestination: "$[[AppCountry]].sib.global.data.out"
            outboundHeader: [
              {
                header: {
                  Description = "${{#ResourceType}}"
                  DestinationName = "${{#DestinationFileName}}"
                }
              },
              {
                condition = "${{#InStoreCommunication eq '1'}}"
                header: {
                  AppBridgeVendor: "activemq"
                  AppBridgeProvider: "activemq"
                  AppBridgeDestination: "ClientToQ"
                  Filename: "${{#DestinationFileName}}"
                  DestinationPath: "/opt/inbound"
                }
              }
            ]
            applicationLogHeader = [
              "ResourceType", "DestinationFileName", "ClientIP", "DeviceCategory"
            ]
          }
        ]
      }

      DataClient = {
        withCBE: false
        inbound: {
          inboundUri: "queue:ClientFromQ"
          header: {
            ResourceType: "${{#MsgType}}"
          }
        },
        outbound: [
          {
            bridgeVendor: "sagum"
            bridgeProvider: "$[[AppCountry]]_queue"
            bridgeDestination: "queue:/Qu$[[AppCountry]]/data/out"
          }
        ]
      },

      FanOut = {
        withCBE: false
        outbound: [
          {
            bridgeVendor: "sagum"
            bridgeProvider: "$[[AppCountry]]_queue"
            bridgeDestination: "queue:/Qu$[[AppCountry]]/data/out"
            applicationLogHeader = [
              "keymetric1", "keymetric2"
            ]
          },
          {
            id: "OtherApp"
            bridgeVendor: "activemq"
            bridgeProvider: "activemq"
            bridgeDestination: "OtherAppToQueue"
            timeToLive: "14400000"
            applicationLogHeader = [
              "keymetric1", "keymetric3"
            ]
          }
        ]
      }
    }
  }
}
